Application.Models.run(function (breeze, datacontext) {
    // Extract Breeze metadata definition types
    var dataType = breeze.DataType;
    var autoGeneratedKeyType = breeze.AutoGeneratedKeyType;

    // The empty metadataStore to which we add types
    var store = datacontext.metadata;

    // Type definitions
    store.addEntityType({
        shortName: "Assignment",
        namespace: "Models",
        autoGeneratedKeyType: autoGeneratedKeyType.Identity,
        dataProperties: {
            id: { dataType: dataType.Int32, isNullable: false, isPartOfKey: true },
            name: { dataType: dataType.String, maxLength: 255, isNullable: true },
            dueDate: { dataType: dataType.DateTime, isNullable: true },
            isDone: { dataType: dataType.Boolean, isNullable: false },
            employeeId: { dataType: dataType.Int32, isNullable: false },
            assigneeId: { dataType: dataType.Int32, isNullable: true },
            categoryId: { dataType: dataType.Int32, isNullable: false },
            templateId: { dataType: dataType.Int32, isNullable: false }
        },
        navigationProperties: {
            employee: {
                entityTypeName: "Employee",
                isScalar: true,
                foreignKeyNames: ["employeeId"],
                associationName: "Employee_Assignments"
            }
        }
    });

    var assignment = function () {
        // Here we can add some default values if needed
    };

    assignment.prototype.isOverdue = function () {
        if (this.isDone) return false;

        return moment(this.due).diff(moment(), 'days') < 0;
    };

    assignment.prototype.getStatus = function () {
        if (this.isDone) return 'closed';

        if (this.isOverdue()) return 'overdue';

        return 'open';
    };

    store.registerEntityTypeCtor("Assignment", assignment);

});
